import static java.lang.System.out;

import java.util.Objects;
import java.util.Scanner;
public class Main {
    public static void main(String[] args) {

        Scanner in = new Scanner(System.in);
        Main m = new Main();

        out.println("Введите номер задания: ");
        int n = in.nextInt();
        in.nextLine();
        switch (n) {
            case 13, 34:
                out.println("Задание 1.3(3.4). Ввод имён.");
                out.println("Введите имя (обязательно при составлении имени): ");
                String firstName = in.nextLine();

                out.println("Введите фамилию: ");
                String lastName = in.nextLine();

                out.println("Введите отчество (только если была введена фамилия): ");
                String patronymic = in.nextLine();

                Name name = new Name(firstName, lastName, patronymic);
                name.correctionCheck();
                name.displayInfo();
                break;

            case 15:
                out.println("Задание 1.5. Этажи.");
                out.println("Введите число этажей (число этажей не может быть меньше 1): ");
                int floors = in.nextInt();

                House house = new House(floors);
                house.checkFloors();
                house.displayInfo();
                break;

            case 24:
                out.println("Задание 2.4. Сотрудники.");
                Employee.Department itDepartment = new Employee.Department("IT");

                Employee petrov = new Employee("Петров", itDepartment);
                Employee kozlov = new Employee("Козлов", itDepartment);
                Employee sidorov = new Employee("Сидоров", itDepartment);

                itDepartment.setHead(kozlov);

                //itDepartment.setHead(sidorov);
                //Выдаст ошибку, если попытаться сделать больше одного главы отдела

                System.out.println(petrov.toString());
                System.out.println(kozlov.toString());
                System.out.println(sidorov.toString());
                break;

            case 55:
                out.println("Задание 5.5. Дроби.");
                Decimal f1 = new Decimal(2,5);
                Decimal f2 = new Decimal(4,6);
                Decimal f3 = new Decimal(1,5);

                String str1 = f1.getDecimal();
                out.println(str1);
                String str2 = f2.getDecimal();
                out.println(str2);

                Decimal result1 = f1.sum(f2);
                Decimal result2 = f1.minus(f2);
                Decimal result3 = f1.mult(f2);
                Decimal result4 = f1.div(f2);

                Decimal result5 = f1.sum(f2).div(f3).minus(5);

                break;

            default:
                throw new IllegalStateException("Unexpected value: " + n);
        }

    }
}

class Name {

    String lastName;
    String firstName;
    String patronymic;

    public Name(String firstName, String lastName, String patronymic) {
        this.lastName = lastName;
        this.firstName = firstName;
        this.patronymic = patronymic;
    }

    void correctionCheck() {
        if (!Objects.equals(patronymic, "")) {
            if ((Objects.equals(firstName, "")) || (Objects.equals(lastName, "")))
                throw new IllegalArgumentException("Имя не может быть составлено таким образом");
        }
        if (!Objects.equals(lastName, "")) {
            if (Objects.equals(firstName, ""))
                throw new IllegalArgumentException("Имя не может быть составлено таким образом");
        }
    }

    void displayInfo() {
        String name = "";

        if (!Objects.equals(lastName, "")) {
            if (!lastName.matches("[а-яА-ЯёЁ]+")) {
                throw new IllegalArgumentException("Могут быть использованы только символы русского алфавита");
            }
            name += lastName + " ";
        }

        if (!Objects.equals(firstName, "")) {
            if (!firstName.matches("[а-яА-ЯёЁ]+")) {
                throw new IllegalArgumentException("Могут быть использованы только символы русского алфавита");
            }
            name += firstName + " ";
        }

        if (!Objects.equals(patronymic, "")) {
            if (!patronymic.matches("[а-яА-ЯёЁ]+")) {
                throw new IllegalArgumentException("Могут быть использованы только символы русского алфавита");
            }
            name += patronymic + " ";
        }

        out.println("Имя: " + name);

    }
}

class House {

    int numberOfFloors;

    public House(int numberOfFloors) {
        this.numberOfFloors = numberOfFloors;
    }

    void checkFloors() {
        if (this.numberOfFloors <= 0) {
            throw new IllegalArgumentException("Количество этажей должно быть больше 0");
        }
    }

    void displayInfo() {
        if (this.numberOfFloors % 10 == 1) {
            out.println("Дом с " + this.numberOfFloors + " этажом");
        } else {
            out.println("Дом с " + this.numberOfFloors + " этажами");
        }
    }

}

class Employee {
    String name;
    Department department;

    public Employee(String name, Department department) {
        this.name = name;
        this.department = department;
    }

    static class Department {

        String name;
        Employee head;

        public Department(String name) {
            this.name = name;
        }

        public void setHead(Employee head) {
            if (this.head != null) {
                throw new IllegalArgumentException("У отдела " + this.name + " уже есть начальник.");
            }
            this.head = head;
        }

        public Employee getHead() {
            return head;
        }

        public String getName() {
            return name;
        }

    }

    public String getName() {
        return name;
    }

    public String toString() {
        if (this == department.getHead()) {
            return name + " начальник отдела " + department.getName();
        } else {
            return name + " работает в отделе " + department.getName() + ", начальник которого " + department.getHead().getName();
        }
    }

}

class Decimal {

    int numerator; //числитель
    int denominator; //знаменатель

    public Decimal(int numerator, int denominator) {
        this.numerator = numerator;
        this.denominator = denominator;
    }

    public String getDecimal() {
        return numerator + "/" + denominator;
    }

    public Decimal sum(Decimal f) {
        out.print(this.numerator + "/" + this.denominator + " + " + f.numerator + "/" + f.denominator + " = ");

        int placeholderDenominator;
        int placeholderNumerator;

        if (this.denominator != f.denominator) {
            placeholderDenominator = this.denominator * f.denominator;
            placeholderNumerator = (this.denominator * f.numerator) + (f.denominator * this. numerator);

        } else {
            placeholderDenominator = this.denominator;
            placeholderNumerator = this.numerator + f.numerator;
        }

        out.println(placeholderNumerator + "/" + placeholderDenominator);
        return new Decimal(placeholderNumerator, placeholderDenominator);
    }

    public Decimal sum(int number) {
        Decimal f = new Decimal(number,1);

        out.print(this.numerator + "/" + this.denominator + " + " + f.numerator + "/" + f.denominator + " = ");

        int placeholderDenominator;
        int placeholderNumerator;

        if (this.denominator != f.denominator) {
            placeholderDenominator = this.denominator * f.denominator;
            placeholderNumerator = (this.denominator * f.numerator) + (f.denominator * this. numerator);

        } else {
            placeholderDenominator = this.denominator;
            placeholderNumerator = this.numerator + f.numerator;
        }

        out.println(placeholderNumerator + "/" + placeholderDenominator);
        return new Decimal(placeholderNumerator, placeholderDenominator);
    }

    public Decimal minus(Decimal f) {
        out.print(this.numerator + "/" + this.denominator + " - " + f.numerator + "/" + f.denominator + " = ");

        int placeholderDenominator;
        int placeholderNumerator;

        if (this.denominator != f.denominator) {
            placeholderDenominator = this.denominator * f.denominator;
            placeholderNumerator = (f.denominator * this. numerator) - (this.denominator * f.numerator);

        } else {
            placeholderDenominator = this.denominator;
            placeholderNumerator = this.numerator - f.numerator;
        }

        out.println(placeholderNumerator + "/" + placeholderDenominator);
        return new Decimal(placeholderNumerator, placeholderDenominator);
    }

    public Decimal minus(int number) {
        Decimal f = new Decimal(number,1);

        out.print(this.numerator + "/" + this.denominator + " - " + f.numerator + "/" + f.denominator + " = ");

        int placeholderDenominator;
        int placeholderNumerator;

        if (this.denominator != f.denominator) {
            placeholderDenominator = this.denominator * f.denominator;
            placeholderNumerator = (f.denominator * this. numerator) - (this.denominator * f.numerator);

        } else {
            placeholderDenominator = this.denominator;
            placeholderNumerator = this.numerator - f.numerator;
        }

        out.println(placeholderNumerator + "/" + placeholderDenominator);
        return new Decimal(placeholderNumerator, placeholderDenominator);
    }

    public Decimal mult(Decimal f) {
        out.print(this.numerator + "/" + this.denominator + " * " + f.numerator + "/" + f.denominator + " = ");

        int placeholderDenominator = this.denominator * f.denominator;
        int placeholderNumerator = this.numerator * f.numerator;

        out.println(placeholderNumerator + "/" + placeholderDenominator);
        return new Decimal(placeholderNumerator, placeholderDenominator);
    }

    public Decimal mult(int number) {
        Decimal f = new Decimal(number,1);

        out.print(this.numerator + "/" + this.denominator + " * " + f.numerator + "/" + f.denominator + " = ");

        int placeholderDenominator = this.denominator * f.denominator;
        int placeholderNumerator = this.numerator * f.numerator;

        out.println(placeholderNumerator + "/" + placeholderDenominator);
        return new Decimal(placeholderNumerator, placeholderDenominator);
    }

    public Decimal div(Decimal f) {
        out.print(this.numerator + "/" + this.denominator + " / " + f.numerator + "/" + f.denominator + " = ");

        int placeholderDenominator = this.denominator * f.numerator;
        int placeholderNumerator = this.numerator * f.denominator;

        out.println(placeholderNumerator + "/" + placeholderDenominator);
        return new Decimal(placeholderNumerator, placeholderDenominator);
    }

    public Decimal div(int number) {
        Decimal f = new Decimal(number,1);

        out.print(this.numerator + "/" + this.denominator + " / " + f.numerator + "/" + f.denominator + " = ");

        int placeholderDenominator = this.denominator * f.numerator;
        int placeholderNumerator = this.numerator * f.denominator;

        out.println(placeholderNumerator + "/" + placeholderDenominator);
        return new Decimal(placeholderNumerator, placeholderDenominator);
    }

}
